import math

def euler12():

  # Problem:
  """
  The sequence of triangle numbers is generated by adding the natural numbers. 
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  Let us list the factors of the first seven triangle numbers:
  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.
  What is the value of the first triangle number to have over five hundred divisors?
  """

  # Solve:
  for i in range(1,50000):
    tri = triangle(i)

    if num_of_factors(tri) > 500:
      return tri


def triangle(n):
  """ finds the nth triangle number using the formuler 1+2+3+...+n """
  result = 0
  for i in range(n+1):
    result += i
  return result

def num_of_factors(n):
  """ returns the number of factors of n (including 1 and n itself) """
  num = 0
  upper = int(math.sqrt(n))

  for i in range(1, upper+1):
    if n % i == 0:
      if n == i*i:
        num = num + 1
      else:
        num = num + 2
  
  return num

print euler12() #76576500 



